package huffman;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


/**
 * Decompression application using static Huffman coding.
 * <p>Usage: java huffman.HuffmanDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "huffman.HuffmanCompress" application.</p>
 */
public final class HuffmanDecompress {

    // Command line main application function.
    public static void decompress(InputStream in, OutputStream out) throws IOException {

        // Perform file decompression
        try (BitInputStream bitIn = new BitInputStream(in)) {
            CanonicalCode canonCode = readCodeLengthTable(bitIn);
            CodeTree code = canonCode.toCodeTree();
            decompress(code, bitIn, out);
        }
    }


    // To allow unit testing, this method is package-private instead of private.
    static CanonicalCode readCodeLengthTable(BitInputStream in) throws IOException {
        int[] codeLengths = new int[257];
        for (int i = 0; i < codeLengths.length; i++) {
            // For this file format, we read 8 bits in big endian
            int val = 0;
            for (int j = 0; j < 8; j++)
                val = (val << 1) | in.readNoEof();
            codeLengths[i] = val;
        }
        return new CanonicalCode(codeLengths);
    }


    // To allow unit testing, this method is package-private instead of private.
    public static void decompress(CodeTree code, BitInputStream in, OutputStream out) throws IOException {
        HuffmanDecoder dec = new HuffmanDecoder(in);
        dec.codeTree = code;
        while (true) {
            int symbol = dec.read();
            if (symbol == 256)  // EOF symbol
                break;
            out.write(symbol);
        }
    }

}
